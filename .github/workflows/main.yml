name: Docker Image CI

on:
  push:
    branches: ["main"]

jobs:
  build-and-push:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '18' # Use your preferred Node.js version

      - name: Install dependencies and build the project
        env: # Add required environment variables here
          NEXT_PUBLIC_SANITY_PROJECT_ID: $NEXT_PUBLIC_SANITY_PROJECT_ID
          NEXT_PUBLIC_NEWSLETTER_PROJECT_ID: "xyz"
          NEXT_PUBLIC_SANITY_DATASET: "abc"
        run: |
          echo $NEXT_PUBLIC_NEWSLETTER_PROJECT_ID
          echo $NEXT_PUBLIC_SANITY_DATASET
          npm ci
          npm run build

      - name: Set up Docker build environment
        run: |
          IMAGE_NAME="mpstme-acm/acm-website-24"
          DATE_TAG=$(date +%Y-%m-%d-%H-%M-%S)
          DOCKERFILE="Dockerfile"
          ENVIRONMENT="production"
          DESCRIPTION="ACM 24' Website"

          docker build . \
            --file "$DOCKERFILE" \
            --tag "$IMAGE_NAME:$DATE_TAG" \
            --tag "$IMAGE_NAME:latest" \
            --build-arg ENVIRONMENT="$ENVIRONMENT" \
            --label "maintainer=mpstme-acm" \
            --label "version=$DATE_TAG" \
            --label "description=$DESCRIPTION" \
            --pull \
            --no-cache

          echo "Docker image built and tagged as $IMAGE_NAME:$DATE_TAG and $IMAGE_NAME:latest"

      - name: Run the Docker container
        run: |
          # Variables
          IMAGE_NAME="mpstme-acm/acm-website-24"
          TAG="latest"
          CONTAINER_NAME="acm-web-container"
          PORT="8080" # Using a free port from your system

          # Stop and remove any existing container with the same name
          if [ "$(docker ps -a | grep $CONTAINER_NAME)" ]; then
            echo "Container with the name '$CONTAINER_NAME' already exists. Stopping and removing it."
            docker stop "$CONTAINER_NAME"
            docker rm "$CONTAINER_NAME"
          fi

          # Run the Docker container
          docker run -d \
            --name "$CONTAINER_NAME" \
            -p "$PORT:3000" \ # Map port 8080 on host to port 3000 on container
            -e NEXT_PUBLIC_SANITY_PROJECT_ID \
            -e NEXT_PUBLIC_NEWSLETTER_PROJECT_ID \
            -e NEXT_PUBLIC_SANITY_DATASET \
            "$IMAGE_NAME:$TAG"

          echo "Docker container '$CONTAINER_NAME' is running from image '$IMAGE_NAME:$TAG' on port $PORT"
